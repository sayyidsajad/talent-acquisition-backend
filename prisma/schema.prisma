// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hr {
  id        String   @id @default(uuid())
  email     String   @unique
  jobs      Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id           String        @id @default(uuid())
  title        String
  company      String
  location     String
  salary       String?
  experience   String
  description  String
  hrId         String
  hr           Hr            @relation(fields: [hrId], references: [id], onDelete: Cascade)
  requirements String[]
  createdAt    DateTime      @default(now())
  chatLogs     ChatMessage[]
  interviews   Interview[]
}

model Candidate {
  id         String        @id @default(uuid())
  email      String        @unique
  chatLogs   ChatMessage[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  interviews Interview[]
}

model ChatMessage {
  id          String    @id @default(uuid())
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobId       String
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  sender      String
  message     String
  createdAt   DateTime  @default(now())
}

model Interview {
  id                   String    @id @default(uuid())
  candidateId          String
  jobId                String
  candidate            Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job                  Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  isInterviewCompleted Boolean   @default(false)
  createdAt            DateTime  @default(now())
}

model MagicLink {
  id        String   @id @default(uuid())
  token     String
  email     String
  role      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
