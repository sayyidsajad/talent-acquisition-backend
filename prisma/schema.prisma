generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hr {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      Job[]
}

model Job {
  id           String        @id @default(uuid())
  title        String
  company      String
  location     String
  salary       String?
  experience   String
  description  String
  requirements String[]
  createdAt    DateTime      @default(now())
  hrId         String
  chatLogs     ChatMessage[]
  interviews   Interview[]
  hr           Hr            @relation(fields: [hrId], references: [id], onDelete: Cascade)
}

model Candidate {
  id         String        @id @default(uuid())
  email      String        @unique
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  chatLogs   ChatMessage[]
  interviews Interview[]
}

model ChatMessage {
  id          String    @id @default(uuid())
  sender      String
  message     String
  createdAt   DateTime  @default(now())
  candidateId String
  jobId       String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Interview {
  id                   String    @id @default(uuid())
  candidateId          String
  jobId                String
  isInterviewCompleted Boolean   @default(false)
  createdAt            DateTime  @default(now())
  candidate            Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job                  Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model MagicLink {
  id        String   @id @default(uuid())
  token     String
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  role      String
}
